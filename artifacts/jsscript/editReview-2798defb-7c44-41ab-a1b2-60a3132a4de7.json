{
	"id": "2798defb-7c44-41ab-a1b2-60a3132a4de7",
	"createdAt": "2024-08-04T01:51:18.943Z",
	"createdBy": "admin",
	"globalScripts": [],
	"externalModules": [],
	"entitySets": [
		{
			"id": "7850ec31-7369-4a8b-a109-2b0d773cc88f",
			"name": "collections",
			"contextname": "collections"
		}
	],
	"apis": [],
	"name": "editReview",
	"ver": "24.8.5.527",
	"description": null,
	"content": [
		"==OBJECT STRING==",
		"const data = req.body;\r",
		"log.error(data);\r",
		"\r",
		"// Verificar se req.user existe\r",
		"if (!req.user) {\r",
		"    log.error(\"User not authenticated\");\r",
		"    return fail(\"User not authenticated\");\r",
		"}\r",
		"\r",
		"const user = req.user.id;\r",
		"const movieIdToUpdate = data.movieId;\r",
		"\r",
		"try {\r",
		"    // Prepare the update object with all possible fields\r",
		"    const updateData = {\r",
		"        rating: data.rating !== undefined ? parseInt(data.rating) : undefined,\r",
		"        review: data.review,\r",
		"        favourite: data.favourite,\r",
		"        wishlist: data.wishlist,\r",
		"        private: data.private,\r",
		"        title: data.title,\r",
		"        release_date: data.release_date ? new Date(data.release_date) : undefined,\r",
		"        genre: data.genre ? JSON.stringify(data.genre) : undefined,\r",
		"        review_check: data.review_check\r",
		"    };\r",
		"\r",
		"    // Remove undefined fields\r",
		"    Object.keys(updateData).forEach(key => updateData[key] === undefined && delete updateData[key]);\r",
		"\r",
		"    // Perform the update\r",
		"    const result = await entities.collections.update(data.id,\r",
		"        updateData\r",
		"    );\r",
		"\r",
		"    if (result.affected > 0) {\r",
		"        console.log(`Successfully updated movie with ID: ${movieIdToUpdate}`);\r",
		"        return {\r",
		"            success: true,\r",
		"            message: `Movie with ID ${movieIdToUpdate} updated successfully`,\r",
		"            affectedRows: result.affected\r",
		"        };\r",
		"    } else {\r",
		"        console.log(`No movie found with ID: ${movieIdToUpdate} for user: ${user}`);\r",
		"        return {\r",
		"            success: false,\r",
		"            message: `No movie found with ID ${movieIdToUpdate} for the current user`\r",
		"        };\r",
		"    }\r",
		"\r",
		"} catch (error) {\r",
		"    log.error(\"Error updating movie:\", error);\r",
		"    return fail(error.message || \"An error occurred while updating the movie\");\r",
		"}\r",
		"\r",
		""
	],
	"useAsGlobalScript": false,
	"isTypescript": false,
	"transpiledContent": null,
	"lastRunSuccessful": false,
	"jsscriptGroup": "3106b9c5-da21-4a43-b0b7-ff0c70daf0cb",
	"package": "cea714f9-70c7-451c-8090-517e9e6854f8"
}